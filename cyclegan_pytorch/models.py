import torch.nn as nn


class Discriminator(nn.Module):
    """
    The discriminator predicts whether an image is real or fake, when the image is generated from the Generator.

    Input:
        - image: An image whose either real or generated by the Generator.
    Output:
        - A single value, representing the probability that the image is real.
    """

    def __init__(self):
        super().__init__()

        self.layers = nn.Sequential(
            # Input is an RGB image
            nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(256),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(512),
            nn.LeakyReLU(0.2, inplace=True),

            # Output is a single value, representing the probability that the image is real.
            nn.Conv2d(512, 1, kernel_size=3, stride=2, padding=1),
            nn.Tanh()
        )

        # self.layers = nn.Sequential(
        #     nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(32),
        #     nn.ReLU(),
        #     nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.MaxPool2d(2),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.Dropout(0.3),
        #
        #     nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(128),
        #     nn.ReLU(),
        #     nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(128),
        #     nn.ReLU(),
        #     nn.MaxPool2d(2),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.Dropout(0.3),
        #
        #     # One output (real/fake)
        #     nn.Conv2d(in_channels=128, out_channels=1, kernel_size=1)
        # )

    def forward(self, image):
        """
        Forward pass of the discriminator.
        """
        return self.layers(image)


class Generator(nn.Module):
    """
    The generator inputs a random noise Z, and generates an image based on Z.

    Input:
        - Z: A random noise.
    Output:
        - An image that is generated from Z.
    """

    def __init__(self, z_dim: int = 3):
        super().__init__()

        self.layers = nn.Sequential(
            # Input of network is a random z
            nn.ConvTranspose2d(in_channels=z_dim, out_channels=64, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(True),

            nn.ConvTranspose2d(in_channels=64, out_channels=96, kernel_size=3, padding=1),
            nn.BatchNorm2d(96),
            nn.ReLU(True),

            nn.ConvTranspose2d(in_channels=96, out_channels=256, kernel_size=3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(True),

            nn.ConvTranspose2d(in_channels=256, out_channels=128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(True),

            # Output should be an RGB image with 3 channels
            nn.ConvTranspose2d(in_channels=128, out_channels=3, kernel_size=3, stride=1, padding=1),
            nn.Tanh()
        )

        # self.layers = nn.Sequential(
        #     # Input is an RGB image
        #     nn.Conv2d(in_channels=3, out_channels=32, kernel_size=5, padding=1),
        #     nn.BatchNorm2d(32),
        #     nn.ReLU(),
        #     nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.MaxPool2d(2),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.Dropout(0.3),
        #
        #     nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(128),
        #     nn.ReLU(),
        #     nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1),
        #     nn.BatchNorm2d(128),
        #     nn.ReLU(),
        #     nn.MaxPool2d(2),
        #     nn.BatchNorm2d(64),
        #     nn.ReLU(),
        #     nn.Dropout(0.3),
        #
        #     # One output (real/fake)
        #     nn.Conv2d(in_channels=128, out_channels=3, kernel_size=1)
        # )

    def forward(self, z):
        return self.layers(z)
